name: Deploy to Staging

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Preview

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/cmp-backend:dev
          build-args: |
            CACHEBUST=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create deployment directory on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p ~/rb-backend-deploy-staging

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: 'docker-compose.dev.yml'
          target: '~/rb-backend-deploy-staging/'
          overwrite: true

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/rb-backend-deploy-staging

            # Set environment variables
            export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
            export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
            export PHOENIX_API_KEY="${{ secrets.PHOENIX_API_KEY }}"
            export PHOENIX_ENDPOINT="${{ secrets.PHOENIX_ENDPOINT }}"
            export ENV="${{ secrets.ENV }}"
            export FRAPPE_BACKEND_BASE_URL="${{ secrets.FRAPPE_BACKEND_BASE_URL }}"
            export FRAPPE_BACKEND_CLIENT_ID="${{ secrets.FRAPPE_BACKEND_CLIENT_ID }}"
            export FRAPPE_BACKEND_CLIENT_SECRET="${{ secrets.FRAPPE_BACKEND_CLIENT_SECRET }}"
            export DATABASE_URL="${{ secrets.DATABASE_URL }}"
            export FRAPPE_SSO_CLIENT_ID="${{ secrets.FRAPPE_SSO_CLIENT_ID }}"
            export FRAPPE_SSO_CLIENT_SECRET="${{ secrets.FRAPPE_SSO_CLIENT_SECRET }}"
            export FRAPPE_SSO_REDIRECT_URI="${{ secrets.FRAPPE_SSO_REDIRECT_URI }}"

            # Stop and remove existing containers
            docker-compose -f docker-compose.dev.yml down

            # Pull the latest image (Docker will use layers from cache when possible)
            docker-compose -f docker-compose.dev.yml pull

            # Start the containers
            docker-compose -f docker-compose.dev.yml up -d

            sleep 10

            # Show running containers
            echo "ðŸ“‹ Running containers:"
            docker-compose -f docker-compose.dev.yml ps

            # Clean up dangling images using basic commands
            echo "ðŸ§¹ Cleaning up unused Docker images..."
            docker images | grep "<none>" | awk '{print $3}' | xargs docker rmi 2>/dev/null || true

            echo "ðŸŽ‰ Deployment completed successfully!"
